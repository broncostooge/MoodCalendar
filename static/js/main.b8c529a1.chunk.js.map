{"version":3,"sources":["Components/Stats/ColumnGraph.js","Components/Stats/Count.js","Components/Stats/PieGraph.js","Components/Stats/index.js","reducers/index.js","store/index.js","Components/Calendar/Mood.js","Components/TableOfContents/index.js","Components/Calendar/ColumnOfNumbers.js","Components/Calendar/Month.js","Components/Calendar/index.js","App.js","serviceWorker.js","index.js"],"names":["ColumnGraph","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","name","Horrible","Bad","Average","Good","Great","react_default","a","createElement","BarChart","width","height","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","fill","Component","connect","Count","_this2","CountList","CountOutput","countList","index","moodCount","push","key","className","color","map","mood","PieGraph","console","log","value","COLORS","PieChart","onMouseEnter","onPieEnter","Pie","cx","cy","innerRadius","outerRadius","paddingAngle","entry","Cell","length","Stats","Stats_Count","Stats_ColumnGraph","Stats_PieGraph","initialState","store","createStore","require","arguments","undefined","action","newState","objectSpread","type","Mood","changeMood","bind","assertThisInitialized","current","next","colorCycle","dispatch","setState","buttonStyle","backgroundColor","moodName","button","style","onClick","TOCButton","disabled","_default","ListOfMoods","Mood_Mood","ColumnOfNumbers","days","i","Month","month","buttons","columnOfMonths","Month_Month","ColumnOfNumbers_ColumnOfNumbers","App","es","TableOfContents_default","Calendar_default","Stats_Stats","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gVAIMA,cACF,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,GAFCP,wEAOd,IAAMQ,EAAO,CACT,CAACC,KAAM,WAAYC,SAAUP,KAAKJ,MAAMW,UACxC,CAACD,KAAM,MAAOE,IAAKR,KAAKJ,MAAMY,KAC9B,CAACF,KAAM,UAAWG,QAAST,KAAKJ,MAAMa,SACtC,CAACH,KAAM,OAAQI,KAAMV,KAAKJ,MAAMc,MAChC,CAACJ,KAAM,QAASK,MAAOX,KAAKJ,MAAMe,QAGtC,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUC,MAAO,IAAKC,OAAQ,IAAKZ,KAAMA,EACrCa,OAAQ,CAACC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAC9CV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAeC,gBAAgB,QAC/BZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAOC,QAAQ,SACfd,EAAAC,EAAAC,cAACa,EAAA,EAAD,MACAf,EAAAC,EAAAC,cAACc,EAAA,EAAD,MACAhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,MACAjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAKJ,QAAQ,WAAWK,KAAK,QAC7BnB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAKJ,QAAQ,MAAMK,KAAK,WACxBnB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAKJ,QAAQ,UAAUK,KAAK,WAC5BnB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAKJ,QAAQ,OAAOK,KAAK,UACzBnB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAKJ,QAAQ,QAAQK,KAAK,kBA9BpBC,aA+CXC,kBAVf,SAAyB7B,GACrB,MAAO,CACHG,SAAUH,EAAMG,SAChBC,IAAIJ,EAAMI,IACVC,QAAQL,EAAMK,QACdC,KAAKN,EAAMM,KACXC,MAAMP,EAAMO,QAILsB,CAAyBtC,GChDlCuC,cACF,SAAAA,EAAYtC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkC,IACdrC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoC,GAAA/B,KAAAH,KAAMJ,KACCQ,MAAQ,GAFDP,wEAMT,IAAAsC,EAAAnC,KAwBDoC,EAAY,GAEhB,SAASC,EAAYC,EAAWhC,EAAMiC,EAAOC,GACzC,OAAOF,EAAUG,KAAK7B,EAAAC,EAAAC,cAAA,MAAI4B,IAAKH,GAAQjC,EAAjB,KAAwBM,EAAAC,EAAAC,cAAA,MAAI4B,IAAKH,EAAOI,UAAWrC,EAAK,SAAUkC,KAuB5F,MAjDe,CACX,CACIlC,KAAM,WACNsC,MAAO,OAEX,CACItC,KAAM,MACNsC,MAAO,UAEX,CACItC,KAAM,UACNsC,MAAO,UAEX,CACItC,KAAM,OACNsC,MAAO,QAEX,CACItC,KAAM,QACNsC,MAAO,UAUTC,IAAI,SAACC,EAAMP,GAiBb,MAhBiB,aAAdO,EAAKxC,MACJ+B,EAAYD,EAAWU,EAAKxC,KAAMiC,EAAOJ,EAAKvC,MAAMW,UAEvC,QAAduC,EAAKxC,MACJ+B,EAAYD,EAAWU,EAAKxC,KAAMiC,EAAOJ,EAAKvC,MAAMY,KAEvC,YAAdsC,EAAKxC,MACJ+B,EAAYD,EAAWU,EAAKxC,KAAMiC,EAAOJ,EAAKvC,MAAMa,SAEvC,SAAdqC,EAAKxC,MACJ+B,EAAYD,EAAWU,EAAKxC,KAAMiC,EAAOJ,EAAKvC,MAAMc,MAEvC,UAAdoC,EAAKxC,MACJ+B,EAAYD,EAAWU,EAAKxC,KAAMiC,EAAOJ,EAAKvC,MAAMe,QAGhD,IAIRC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,aACKsB,YA9DLJ,aAgFLC,kBAVf,SAAyB7B,GACrB,MAAO,CACHG,SAAUH,EAAMG,SAChBC,IAAIJ,EAAMI,IACVC,QAAQL,EAAMK,QACdC,KAAKN,EAAMM,KACXC,MAAMP,EAAMO,QAILsB,CAAyBC,6BC/ElCa,cACF,SAAAA,EAAYnD,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+C,IACdlD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiD,GAAA5C,KAAAH,KAAMJ,KACDQ,MAAQ,GAFCP,wEAOdmD,QAAQC,IAAIjD,MACZ,IAAMK,EAAO,CACT,CAACC,KAAM,WAAY4C,MAAOlD,KAAKJ,MAAMW,UACrC,CAACD,KAAM,MAAO4C,MAAOlD,KAAKJ,MAAMY,KAChC,CAACF,KAAM,UAAW4C,MAAOlD,KAAKJ,MAAMa,SACpC,CAACH,KAAM,OAAQ4C,MAAOlD,KAAKJ,MAAMc,MACjC,CAACJ,KAAM,QAAS4C,MAAOlD,KAAKJ,MAAMe,QAEhCwC,EAAS,CAAC,MAAO,SAAU,SAAU,OAAQ,SAEnD,OACIvC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAUpC,MAAO,IAAKC,OAAQ,IAAKoC,aAAcrD,KAAKsD,YACtD1C,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CACAlD,KAAMA,EACNmD,GAAI,IACJC,GAAI,IACJC,YAAa,GACbC,YAAa,GACb5B,KAAK,UACL6B,aAAc,GAGVvD,EAAKwC,IAAI,SAACgB,EAAOtB,GAAR,OAAkB3B,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAM/B,KAAMoB,EAAOZ,EAAQY,EAAOY,YAEjEnD,EAAAC,EAAAC,cAACe,EAAA,EAAD,gBAlCOG,aAoDRC,kBAVf,SAAyB7B,GACrB,MAAO,CACHG,SAAUH,EAAMG,SAChBC,IAAIJ,EAAMI,IACVC,QAAQL,EAAMK,QACdC,KAAKN,EAAMM,KACXC,MAAMP,EAAMO,QAILsB,CAAyBc,GCnDnBiB,mLAGb,OACIpD,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,SACX/B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,SACX/B,EAAAC,EAAAC,cAACmD,EAAD,OAEJrD,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,eACX/B,EAAAC,EAAAC,cAACoD,EAAD,OAEJtD,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,YACX/B,EAAAC,EAAAC,cAACqD,EAAD,eAZenC,8BCL7BoC,EAAe,CACjB7D,SAAS,EACTC,IAAI,EACJC,QAAQ,EACRC,KAAK,EACLC,MAAM,GCCK0D,GAFDC,EAFUC,EAAQ,IAAxBD,aDMO,WAAkC,IAAjClE,EAAiCoE,UAAAT,OAAA,QAAAU,IAAAD,UAAA,GAAAA,UAAA,GAAzBJ,EAAcM,EAAWF,UAAAT,OAAA,EAAAS,UAAA,QAAAC,EACvCE,EAAQ7E,OAAA8E,EAAA,EAAA9E,CAAA,GAAOM,GA2CrB,MAxCmB,iCAAhBsE,EAAOG,OACNF,EAASpE,UAAY,EACrByC,QAAQC,IAAI0B,EAASpE,WAEN,iCAAhBmE,EAAOG,OACNF,EAASpE,UAAY,GAIN,4BAAhBmE,EAAOG,OACNF,EAASnE,KAAO,GAED,4BAAhBkE,EAAOG,OACNF,EAASnE,KAAO,GAID,gCAAhBkE,EAAOG,OACNF,EAASlE,SAAW,GAEL,gCAAhBiE,EAAOG,OACNF,EAASlE,SAAW,GAIL,6BAAhBiE,EAAOG,OACNF,EAASjE,MAAQ,GAEF,6BAAhBgE,EAAOG,OACNF,EAASjE,MAAQ,GAIF,8BAAhBgE,EAAOG,OACNF,EAAShE,OAAS,GAEH,8BAAhB+D,EAAOG,OACNF,EAAShE,OAAS,GAGfgE,IEjDUG,cACjB,SAAAA,EAAYlF,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8E,IACfjF,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgF,GAAA3E,KAAAH,KAAMJ,KACDQ,MAAQ,CACT0C,KAAM,CACFxC,KAAMT,EAAKD,MAAMU,MAAQ,UACzBsC,MAAO/C,EAAKD,MAAMgD,OAAS,UAIvC/C,EAAKkF,WAAalF,EAAKkF,WAAWC,KAAhBlF,OAAAmF,EAAA,EAAAnF,QAAAmF,EAAA,EAAAnF,CAAAD,KATCA,4EAYP,IAAAsC,EAAAnC,KACY,CAChB,CACIkF,QAAS,QACTC,KAAM,OAEV,CACID,QAAS,MACTC,KAAM,UAEV,CACID,QAAS,SACTC,KAAM,UAEV,CACID,QAAS,SACTC,KAAM,QAEV,CACID,QAAS,OACTC,KAAM,SAEV,CACID,QAAS,QACTC,KAAM,UAIFtC,IAAI,SAACuC,EAAY7C,GACzB,OAAGJ,EAAK/B,MAAM0C,KAAKF,QAAUwC,EAAWF,SACb,QAApBE,EAAWD,KACVd,EAAMgB,SAAS,CAAER,KAAM,iCAEC,WAApBO,EAAWD,MACfd,EAAMgB,SAAS,CAAER,KAAM,iCACvBR,EAAMgB,SAAS,CAAER,KAAM,6BAEC,WAApBO,EAAWD,MACfd,EAAMgB,SAAS,CAAER,KAAM,4BACvBR,EAAMgB,SAAS,CAAER,KAAM,iCAEC,SAApBO,EAAWD,MACfd,EAAMgB,SAAS,CAAER,KAAM,gCACvBR,EAAMgB,SAAS,CAAER,KAAM,8BAEC,UAApBO,EAAWD,MACfd,EAAMgB,SAAS,CAAER,KAAM,6BACvBR,EAAMgB,SAAS,CAAER,KAAM,+BAEC,UAApBO,EAAWD,MACfd,EAAMgB,SAAS,CAAER,KAAM,8BAEpB1C,EAAKmD,SAAS,CAACxC,KAAK,CAACxC,KAAK6B,EAAK/B,MAAM0C,KAAKxC,KAAMsC,MAAOwC,EAAWD,SAEtE,wCAMX,IAAMI,EAAc,CAChBC,gBAAiB,SAGjB5C,EAAQ5C,KAAKI,MAAM0C,KAAKF,MACxB6C,EAAW,GACXC,EAAS9E,EAAAC,EAAAC,cAAA,UAAQ6B,UAAU,aAAagD,MAAOJ,EAAaK,QAAS5F,KAAK+E,aAc9E,OAZGnC,IACC2C,EAAYC,gBAAkB5C,GAG/B5C,KAAKJ,MAAMU,OACVmF,EAAW7E,EAAAC,EAAAC,cAAA,QAAM6B,UAAU,YAAY3C,KAAKJ,MAAMU,OAGnDN,KAAKJ,MAAMiG,YACVH,EAAS9E,EAAAC,EAAAC,cAAA,UAAQ6B,UAAU,aAAagD,MAAOJ,EAAaO,UAAQ,KAIpElF,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,gBACV8C,EACAC,UAhGiB1D,2BCC9B,SAAA+D,EAAYnG,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+F,IACflG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiG,GAAA5F,KAAAH,KAAMJ,KACDQ,MAAQ,GAFEP,wEAOf,IAAMmG,EAAc,GA4BpB,MA3Be,CACb,CACE1F,KAAM,WACNsC,MAAO,OAET,CACEtC,KAAM,MACNsC,MAAO,UAET,CACEtC,KAAM,UACNsC,MAAO,UAET,CACEtC,KAAM,OACNsC,MAAO,QAET,CACEtC,KAAM,QACNsC,MAAO,UAILC,IAAI,SAACC,EAAMP,GACf,OAAOyD,EAAYvD,KAAK7B,EAAAC,EAAAC,cAACmF,EAAD,CAAMJ,WAAa,EAAMvF,KAAMwC,EAAKxC,KAAMsC,MAAOE,EAAKF,MAAOF,IAAMH,OAI3F3B,EAAAC,EAAAC,cAAA,WACGkF,UAtCgBhE,aCDRkE,mLAIb,IAFA,IAAMC,EAAO,GAELC,EAAI,EAAGA,EAAI,GAAIA,IACnBD,EAAK1D,KAAK7B,EAAAC,EAAAC,cAAA,OAAK4B,IAAM0D,EAAGzD,UAAU,gBAAgByD,IAGtD,OACIxF,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,kBAAkBwD,UATAnE,aCCxBqE,cACjB,SAAAA,EAAYzG,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqG,IACfxG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuG,GAAAlG,KAAAH,KAAMJ,KACDQ,MAAQ,CACTkG,MAAO,CACHhG,KAAMT,EAAKD,MAAMU,KACjB6F,KAAMtG,EAAKD,MAAMuG,OALVtG,wEAaf,IAFA,IAAM0G,EAAU,GAERH,EAAI,EAAGA,EAAIpG,KAAKI,MAAMkG,MAAMH,KAAMC,IACtCG,EAAQ9D,KAAK7B,EAAAC,EAAAC,cAACmF,EAAD,CAAMJ,WAAa,EAAOnD,IAAK0D,KAGhD,OACIxF,EAAAC,EAAAC,cAAA,OAAK6B,UAAY,kBACb/B,EAAAC,EAAAC,cAAA,OAAK6B,UAAY,gBACZ3C,KAAKI,MAAMkG,MAAMhG,KAAK,IAE1BiG,UAvBkBvE,2BCE/B,SAAA+D,EAAYnG,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+F,IACdlG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiG,GAAA5F,KAAAH,KAAMJ,KACGQ,MAAQ,GAFHP,wEAOd,IAmDM2G,EAAiB,GAMvB,MAzD4B,CACxB,CACIlG,KAAM,UACN6F,KAAM,IAEV,CACI7F,KAAM,UACN6F,KAAM,IAEV,CACI7F,KAAM,QACN6F,KAAM,IAEV,CACI7F,KAAM,QACN6F,KAAM,IAEV,CACI7F,KAAM,MACN6F,KAAM,IAEV,CACI7F,KAAM,OACN6F,KAAM,IAEV,CACI7F,KAAM,OACN6F,KAAM,IAEV,CACI7F,KAAM,SACN6F,KAAM,IAEV,CACI7F,KAAM,YACN6F,KAAM,IAEV,CACI7F,KAAM,UACN6F,KAAM,IAEV,CACI7F,KAAM,WACN6F,KAAM,IAEV,CACI7F,KAAM,WACN6F,KAAM,KAMMtD,IAAI,SAACyD,EAAO/D,GAC5B,OAAOiE,EAAe/D,KAAK7B,EAAAC,EAAAC,cAAC2F,EAAD,CAAOnG,KAAMgG,EAAMhG,KAAM6F,KAAMG,EAAMH,KAAMzD,IAAKH,OAI3E3B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,YACX/B,EAAAC,EAAAC,cAAC4F,EAAD,MACCF,UApEYxE,aC0Bd2E,2LApBX,OACE/F,EAAAC,EAAAC,cAAC8F,EAAA,EAAD,CAAUvC,MAAOA,GACfzD,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,OACX/B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,UACb/B,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAC+F,EAAD,OAEFjG,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,YACf/B,EAAAC,EAAAC,cAAA,sBACEF,EAAAC,EAAAC,cAACgG,EAAD,OAEFlG,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,UACb/B,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAACiG,EAAD,gBAfI/E,cCIEgF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1G,EAAAC,EAAAC,cAACyG,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b8c529a1.chunk.js","sourcesContent":["import React, { Component }  from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\r\n\r\nclass ColumnGraph extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const data = [\r\n            {name: 'Horrible', Horrible: this.props.Horrible},\r\n            {name: 'Bad', Bad: this.props.Bad},\r\n            {name: 'Average', Average: this.props.Average},\r\n            {name: 'Good', Good: this.props.Good},\r\n            {name: 'Great', Great: this.props.Great}\r\n        ];\r\n\r\n        return (\r\n            <div>\r\n                <h3>Column Graph</h3>\r\n                <BarChart width={600} height={300} data={data}\r\n                    margin={{top: 5, right: 30, left: 20, bottom: 5}}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                    <XAxis dataKey=\"name\"/>\r\n                    <YAxis/>\r\n                    <Tooltip/>\r\n                    <Legend />\r\n                    <Bar dataKey=\"Horrible\" fill=\"red\" />\r\n                    <Bar dataKey=\"Bad\" fill=\"orange\" />\r\n                    <Bar dataKey=\"Average\" fill=\"yellow\" />\r\n                    <Bar dataKey=\"Good\" fill=\"green\" />\r\n                    <Bar dataKey=\"Great\" fill=\"blue\" />\r\n                </BarChart>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return { \r\n        Horrible: state.Horrible,\r\n        Bad:state.Bad,\r\n        Average:state.Average,\r\n        Good:state.Good,\r\n        Great:state.Great \r\n    };\r\n  }\r\n\r\nexport default connect(mapStateToProps)(ColumnGraph);","import React, { Component }  from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Count extends Component {\r\n    constructor(props){\r\n        super(props)\r\n          this.state = {\r\n        }\r\n      }\r\n\r\n    render() {\r\n        const moods =  [\r\n            {\r\n                name: \"Horrible\", \r\n                color: \"Red\"\r\n            }, \r\n            {\r\n                name: \"Bad\", \r\n                color: \"Orange\"\r\n            },\r\n            {\r\n                name: \"Average\", \r\n                color: \"Yellow\"\r\n            },\r\n            {\r\n                name: \"Good\", \r\n                color: \"Blue\"\r\n            },\r\n            {\r\n                name: \"Great\", \r\n                color: \"Green\"\r\n            }\r\n        ]\r\n\r\n        let CountList = []\r\n\r\n        function CountOutput(countList, name, index, moodCount){\r\n            return countList.push(<tr key={index}>{name}: <td key={index} className={name+'Count'}>{moodCount}</td></tr>);\r\n        }\r\n\r\n        moods.map((mood, index) => {\r\n            if(mood.name === \"Horrible\"){\r\n                CountOutput(CountList, mood.name, index, this.props.Horrible);\r\n            }\r\n            if(mood.name === \"Bad\"){\r\n                CountOutput(CountList, mood.name, index, this.props.Bad);\r\n            }\r\n            if(mood.name === \"Average\"){\r\n                CountOutput(CountList, mood.name, index, this.props.Average);\r\n            }\r\n            if(mood.name === \"Good\"){\r\n                CountOutput(CountList, mood.name, index, this.props.Good);\r\n            }\r\n            if(mood.name === \"Great\"){\r\n                CountOutput(CountList, mood.name, index, this.props.Great);\r\n            }\r\n\r\n            return -1;\r\n        })\r\n\r\n        return (\r\n            <div>\r\n                <h3>Count</h3>\r\n                <table>\r\n                    <tbody>\r\n                        {CountList}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return { \r\n        Horrible: state.Horrible,\r\n        Bad:state.Bad,\r\n        Average:state.Average,\r\n        Good:state.Good,\r\n        Great:state.Great \r\n    };\r\n  }\r\n\r\nexport default connect(mapStateToProps)(Count);\r\n","import React, { Component }  from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { PieChart, Pie, Cell, Legend } from 'recharts';\r\n\r\nclass PieGraph extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log(this);\r\n        const data = [\r\n            {name: 'Horrible', value: this.props.Horrible}, \r\n            {name: 'Bad', value: this.props.Bad},\r\n            {name: 'Average', value: this.props.Average}, \r\n            {name: 'Good', value: this.props.Good}, \r\n            {name: 'Great', value: this.props.Great}\r\n        ];\r\n        const COLORS = ['red', 'orange', 'yellow', 'blue', 'green']; \r\n\r\n        return (\r\n            <div>\r\n                <h3>Pie Graph</h3>\r\n                <PieChart width={800} height={400} onMouseEnter={this.onPieEnter}>\r\n                <Pie\r\n                data={data} \r\n                cx={120} \r\n                cy={200} \r\n                innerRadius={60}\r\n                outerRadius={80} \r\n                fill=\"#8884d8\"\r\n                paddingAngle={5}\r\n                >\r\n                    {\r\n                    data.map((entry, index) => <Cell fill={COLORS[index % COLORS.length]}/>)\r\n                }\r\n                <Legend />\r\n                </Pie>\r\n            </PieChart>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return { \r\n        Horrible: state.Horrible,\r\n        Bad:state.Bad,\r\n        Average:state.Average,\r\n        Good:state.Good,\r\n        Great:state.Great \r\n    };\r\n  }\r\n\r\nexport default connect(mapStateToProps)(PieGraph);","import React, { Component } from 'react';\r\nimport ColumnGraph from './ColumnGraph';\r\nimport Count from './Count';\r\nimport PieGraph from './PieGraph'\r\n\r\nexport default class Stats extends Component{\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"Stats\">\r\n                <div className=\"Count\">\r\n                    <Count />\r\n                </div>\r\n                <div className=\"ColumnGraph\">\r\n                    <ColumnGraph />\r\n                </div>\r\n                <div className=\"PieGraph\">\r\n                    <PieGraph />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","const initialState = {\r\n    Horrible:0,\r\n    Bad:0,\r\n    Average:0,\r\n    Good:0,\r\n    Great:0\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const newState = {...state};\r\n    \r\n    //HORRIBLE\r\n    if(action.type === 'INCREASE_HORRIBLE_MOOD_COUNT'){\r\n        newState.Horrible += 1;\r\n        console.log(newState.Horrible)\r\n    }\r\n    if(action.type === 'DECREASE_HORRIBLE_MOOD_COUNT'){\r\n        newState.Horrible -= 1;\r\n    }\r\n\r\n    //BAD\r\n    if(action.type === 'INCREASE_BAD_MOOD_COUNT'){\r\n        newState.Bad += 1;\r\n    }\r\n    if(action.type === 'DECREASE_BAD_MOOD_COUNT'){\r\n        newState.Bad -= 1;\r\n    }\r\n\r\n    //AVERAGE\r\n    if(action.type === 'INCREASE_AVERAGE_MOOD_COUNT'){\r\n        newState.Average += 1;\r\n    }\r\n    if(action.type === 'DECREASE_AVERAGE_MOOD_COUNT'){\r\n        newState.Average -= 1;\r\n    }\r\n\r\n    //GOOD\r\n    if(action.type === 'INCREASE_GOOD_MOOD_COUNT'){\r\n        newState.Good += 1;\r\n    }\r\n    if(action.type === 'DECREASE_GOOD_MOOD_COUNT'){\r\n        newState.Good -= 1;\r\n    }\r\n\r\n    //GREAT\r\n    if(action.type === 'INCREASE_GREAT_MOOD_COUNT'){\r\n        newState.Great += 1;\r\n    }\r\n    if(action.type === 'DECREASE_GREAT_MOOD_COUNT'){\r\n        newState.Great -= 1;\r\n    }\r\n\r\n    return newState;\r\n}","import myReducer from '../reducers'\r\n\r\nconst { createStore } = require('redux');\r\n\r\nconst store = createStore(myReducer);\r\n\r\nexport default store","import React, { Component } from 'react';\r\nimport store from '../../store'\r\n\r\nexport default class Mood extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            mood: {\r\n                name: this.props.name || \"default\",\r\n                color: this.props.color || \"white\"\r\n            }\r\n        };\r\n\r\n    this.changeMood = this.changeMood.bind(this);\r\n    }\r\n\r\n    changeMood(){\r\n        const colorCycles = [ \r\n            {\r\n                current: \"white\",\r\n                next: \"red\"\r\n            },\r\n            {\r\n                current: \"red\",\r\n                next: \"orange\",\r\n            },\r\n            {\r\n                current: \"orange\",\r\n                next: \"yellow\",\r\n            },\r\n            {\r\n                current: \"yellow\",\r\n                next: \"blue\",\r\n            },\r\n            {\r\n                current: \"blue\",\r\n                next: \"green\",\r\n            },\r\n            {\r\n                current: \"green\",\r\n                next: \"white\",\r\n            }\r\n        ]\r\n\r\n        colorCycles.map((colorCycle, index) => {\r\n            if(this.state.mood.color === colorCycle.current){\r\n                if(colorCycle.next === \"red\"){\r\n                    store.dispatch({ type: 'INCREASE_HORRIBLE_MOOD_COUNT' });\r\n                }\r\n                else if(colorCycle.next === \"orange\"){\r\n                    store.dispatch({ type: 'DECREASE_HORRIBLE_MOOD_COUNT' });\r\n                    store.dispatch({ type: 'INCREASE_BAD_MOOD_COUNT' });\r\n                }\r\n                else if(colorCycle.next === \"yellow\"){\r\n                    store.dispatch({ type: 'DECREASE_BAD_MOOD_COUNT' });\r\n                    store.dispatch({ type: 'INCREASE_AVERAGE_MOOD_COUNT' });\r\n                }\r\n                else if(colorCycle.next === \"blue\"){\r\n                    store.dispatch({ type: 'DECREASE_AVERAGE_MOOD_COUNT' });\r\n                    store.dispatch({ type: 'INCREASE_GOOD_MOOD_COUNT' });\r\n                }\r\n                else if(colorCycle.next === \"green\"){\r\n                    store.dispatch({ type: 'DECREASE_GOOD_MOOD_COUNT' });\r\n                    store.dispatch({ type: 'INCREASE_GREAT_MOOD_COUNT' });\r\n                }\r\n                else if(colorCycle.next === \"white\"){\r\n                    store.dispatch({ type: 'DECREASE_GREAT_MOOD_COUNT'});\r\n                }\r\n                return this.setState({mood:{name:this.state.mood.name, color: colorCycle.next}});\r\n            }\r\n            return null;\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const buttonStyle = {\r\n            backgroundColor: \"white\"\r\n        };\r\n\r\n        let color = this.state.mood.color;\r\n        let moodName = \"\";\r\n        let button = <button className=\"MoodRating\" style={buttonStyle} onClick={this.changeMood}></button>;\r\n\r\n        if(color){\r\n            buttonStyle.backgroundColor = color;\r\n        }\r\n\r\n        if(this.props.name){\r\n            moodName = <span className=\"MoodName\">{this.props.name}</span>;\r\n        }\r\n\r\n        if(this.props.TOCButton){\r\n            button = <button className=\"MoodRating\" style={buttonStyle} disabled></button>\r\n        }\r\n\r\n        return (\r\n            <div className=\"CalendarCell\">\r\n                {moodName}\r\n                {button}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Mood from '../Calendar/Mood';\r\n\r\nexport default class extends Component{\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n        }\r\n      }\r\n      render() {\r\n    \r\n        const ListOfMoods = [];\r\n        const moods =  [\r\n          {\r\n            name: \"Horrible\", \r\n            color: \"Red\"\r\n          }, \r\n          {\r\n            name: \"Bad\", \r\n            color: \"Orange\"\r\n          },\r\n          {\r\n            name: \"Average\", \r\n            color: \"Yellow\"\r\n          },\r\n          {\r\n            name: \"Good\", \r\n            color: \"Blue\"\r\n          },\r\n          {\r\n            name: \"Great\", \r\n            color: \"Green\"\r\n          }\r\n        ]\r\n    \r\n        moods.map((mood, index) => {\r\n          return ListOfMoods.push(<Mood TOCButton = {true} name={mood.name} color={mood.color} key ={index}/>);\r\n        })\r\n    \r\n        return (\r\n          <div>\r\n            {ListOfMoods}\r\n          </div>\r\n        )\r\n      }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class ColumnOfNumbers extends Component {\r\n    render() {\r\n        const days = [];\r\n\r\n        for(let i = 0; i < 32; i++){\r\n            days.push(<div key ={i} className=\"CalendarCell\">{i}</div>);\r\n        }\r\n\r\n        return (\r\n            <div className=\"CalendarColumn\">{days}</div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Mood from './Mood'\r\n\r\nexport default class Month extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            month: {\r\n                name: this.props.name,\r\n                days: this.props.days\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n\r\n        const buttons = [];\r\n\r\n        for(let i = 0; i < this.state.month.days; i++){\r\n            buttons.push(<Mood TOCButton = {false} key={i} />);\r\n        }\r\n\r\n        return (\r\n            <div className = \"CalendarColumn\">\r\n                <div className = \"CalendarCell\">\r\n                    {this.state.month.name[0]}\r\n                </div>\r\n                {buttons}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport ColumnOfNumbers from './ColumnOfNumbers'\r\nimport Month from './Month'\r\n\r\nexport default class extends Component{\r\n    constructor(props){\r\n        super(props)\r\n            this.state = {\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const ListOfMonthsAndDays = [\r\n            {\r\n                name: \"January\",\r\n                days: 31\r\n            },\r\n            {\r\n                name: \"Febuary\",\r\n                days: 29\r\n            },\r\n            {\r\n                name: \"March\",\r\n                days: 31\r\n            },\r\n            {\r\n                name: \"April\",\r\n                days: 30\r\n            },\r\n            {\r\n                name: \"May\",\r\n                days: 31\r\n            },\r\n            {\r\n                name: \"June\",\r\n                days: 30\r\n            },\r\n            {\r\n                name: \"July\",\r\n                days: 31\r\n            },\r\n            {\r\n                name: \"August\",\r\n                days: 31\r\n            },\r\n            {\r\n                name: \"September\",\r\n                days: 30\r\n            },\r\n            {\r\n                name: \"October\",\r\n                days: 31\r\n            },\r\n            {\r\n                name: \"November\",\r\n                days: 30\r\n            },\r\n            {\r\n                name: \"December\",\r\n                days: 31\r\n            }\r\n        ]\r\n\r\n        const columnOfMonths = [];\r\n\r\n        ListOfMonthsAndDays.map((month, index) => {\r\n            return columnOfMonths.push(<Month name={month.name} days={month.days} key={index} />)\r\n        });\r\n\r\n        return (\r\n            <div className=\"Calendar\">\r\n                <ColumnOfNumbers />\r\n                {columnOfMonths}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Stats from './Components/Stats'\r\nimport TableOfContents from './Components/TableOfContents'\r\nimport Calendar from './Components/Calendar'\r\nimport './Contents/CSS/App.css';\r\nimport store from './store'\r\nimport { Provider } from 'react-redux'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store} >\r\n        <div className=\"App\">\r\n            <div className=\"Buffer\">\r\n              <h2>Table of Contents</h2>\r\n              <TableOfContents />\r\n            </div>\r\n            <div className=\"Calendar\">\r\n            <h2>Calendar</h2>\r\n              <Calendar />\r\n            </div>\r\n            <div className=\"Buffer\">\r\n              <h2>Stats</h2>\r\n              <Stats />\r\n            </div>\r\n        </div>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Contents/CSS/index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}