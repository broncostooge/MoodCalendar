{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MoodSelector","options","this","props","Moods","map","mood","index","push","react_default","a","createElement","App_Mood","className","Component","Mood","key","days","Month","monthParameter","split","parseInt","i","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","months","moods","month","App_Month","App_MoodSelector","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAGMA,0LAGF,IAAMC,EAAU,GAMhB,OAJAC,KAAKC,MAAMC,MAAMC,IAAI,SAACC,EAAMC,GAAP,OACnBN,EAAQO,KAAKC,EAAAC,EAAAC,cAAA,WAAML,EAAN,IAAYG,EAAAC,EAAAC,cAACC,EAAD,UAIzBH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAY,sBAAhB,qBACCZ,UAZkBa,cAoCrBC,GAlBwBD,6LAoB1B,OACEL,EAAAC,EAAAC,cAAA,UAAQE,UAAU,aAAaG,IAAMd,KAAKC,MAAMc,cAHnCH,cAQbI,mLAGF,IACIC,EADElB,EAAU,GAEhBkB,EAAiBjB,KAAKC,MAAMe,MAAME,MAAM,KAIxC,IAFA,IAAIH,EAAOI,SAASF,EAAe,IAE1BG,EAAI,EAAGA,EAAIL,EAAMK,IACxBrB,EAAQO,KAAKC,EAAAC,EAAAC,cAACC,EAAD,CAAMI,IAAOM,KAG5B,OACEb,EAAAC,EAAAC,cAAA,SAAOE,UAAU,SACfJ,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACGQ,EAAe,GAAG,MAIzBV,EAAAC,EAAAC,cAAA,aACKV,WAvBOa,aA8DLS,cA9Bb,SAAAA,EAAYpB,GAAO,IAAAqB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAvB,KAAAqB,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAvB,KAAAuB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA3B,KAAMC,KACD2B,MAAQ,CACXC,OAAQ,CAAC,aAAc,aAAc,WAAY,WAAY,SAAU,UAAW,UAAW,YAAa,eAAgB,aAAc,cAAe,eACvJC,MAAO,CAAC,WAAY,MAAO,UAAW,OAAQ,UAJ/BR,gFASjB,OAAOtB,KAAK4B,MAAMC,OAAO1B,IAAI,SAAC4B,EAAO1B,GAAR,OAC3BE,EAAAC,EAAAC,cAACuB,EAAD,CAAOhB,MAAOe,EAAOjB,IAAMT,uCAK7B,OACEE,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACbJ,EAAAC,EAAAC,cAACwB,EAAD,CAAc/B,MAAOF,KAAK4B,MAAME,SAElCvB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aAIfJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBAzBPC,aClEEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.428cb06a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass MoodSelector extends Component {\r\n  render() {\r\n\r\n    const options = [];\r\n\r\n    this.props.Moods.map((mood, index) => (\r\n      options.push(<div>{mood} <Mood /></div>)\r\n    ));\r\n\r\n    return (\r\n      <div className=\"MoodSelector\">\r\n        <h2 className = \"MoodSelectorHeader\">Table Of Contents</h2>\r\n        {options}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass ColumnOfNumbers extends Component {\r\n  render() {\r\n    const options = [];\r\n\r\n    for(let i = 1; i < 32; i++)\r\n    {\r\n      options.push(<tr key = {i}><td key = {i}>{i}</td></tr>);\r\n    }\r\n\r\n    return (\r\n      <table className=\"DaysTextColumnTable\">\r\n        <thead><tr><td>&nbsp;</td></tr></thead>\r\n        <tbody>{options}</tbody>\r\n      </table>\r\n    )\r\n  }\r\n}\r\n\r\nclass Mood extends Component {\r\n  render() {\r\n    return (\r\n      <button className=\"MoodRating\" key ={this.props.days}></button>\r\n    );\r\n  }\r\n}\r\n\r\nclass Month extends Component {\r\n  render() {\r\n\r\n    const options = [];\r\n    let monthParameter = [];\r\n    monthParameter = this.props.Month.split(' ');\r\n \r\n    let days = parseInt(monthParameter[1]);\r\n\r\n    for (let i = 0; i < days; i++){\r\n      options.push(<Mood key = {i}/>);\r\n    }\r\n\r\n    return (\r\n      <table className=\"Month\">\r\n        <thead>\r\n          <tr>\r\n            <td>\r\n              {monthParameter[0][0]}\r\n            </td>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n            {options}\r\n        </tbody>\r\n      </table>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      months: [\"January 31\", \"Febuary 28\", \"March 31\" ,\"April 30\", \"May 31\", \"June 30\", \"July 31\", \"August 31\", \"September 30\", \"October 31\", \"November 30\", \"December 31\"],\r\n      moods: [\"Horrible\", \"Bad\", \"Average\", \"Good\", \"Great\"]\r\n    }\r\n  }\r\n\r\n  renderCalendar() {\r\n    return this.state.months.map((month, index) => (\r\n      <Month Month={month} key ={index} />\r\n    ));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n          <div className=\"MoodSelector\">\r\n            <MoodSelector Moods={this.state.moods}/>\r\n          </div>\r\n          <div className=\"Calendar\">\r\n            {/*<ColumnOfNumbers />\r\n            {this.renderCalendar()}*/}\r\n          </div>\r\n          <div className=\"Buffer\"></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}