{"version":3,"sources":["Components/Stats/ColumnGraph.js","Components/Stats/Count.js","Components/Stats/PieGraph.js","Components/Stats/index.js","Components/Calendar/Mood.js","Components/TableOfContents/index.js","Components/Calendar/ColumnOfNumbers.js","Components/Calendar/Month.js","Components/Calendar/index.js","App.js","serviceWorker.js","index.js"],"names":["ColumnGraph","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","Component","Count","CountList","name","color","map","mood","index","push","key","className","PieGraph","Count_Count","ColumnGraph_ColumnGraph","PieGraph_PieGraph","Mood","changeMood","bind","assertThisInitialized","_this2","current","next","colorCycle","setState","buttonStyle","backgroundColor","moodName","button","style","onClick","TOCButton","disabled","_default","ListOfMoods","Mood_Mood","ColumnOfNumbers","days","i","Month","month","buttons","columnOfMonths","Month_Month","ColumnOfNumbers_ColumnOfNumbers","App","TableOfContents_default","Calendar_default","Stats_default","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3a2f1fc6.chunk.js","sourcesContent":["import React, { Component }  from 'react';\r\n\r\nexport default class ColumnGraph extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <h3>Column Graph</h3>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component }  from 'react';\r\n\r\nexport default class Count extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const moods =  [\r\n            {\r\n                name: \"Horrible\", \r\n                color: \"Red\"\r\n            }, \r\n            {\r\n                name: \"Bad\", \r\n                color: \"Orange\"\r\n            },\r\n            {\r\n                name: \"Average\", \r\n                color: \"Yellow\"\r\n            },\r\n            {\r\n                name: \"Good\", \r\n                color: \"Blue\"\r\n            },\r\n            {\r\n                name: \"Great\", \r\n                color: \"Green\"\r\n            }\r\n        ]\r\n\r\n        let CountList = []\r\n\r\n        moods.map((mood, index) => {\r\n            return CountList.push(<tr key={index}>{mood.name}Count:<td key={index} className={mood.name+'Count'}>0</td></tr>)\r\n        })\r\n\r\n        return (\r\n            <div>\r\n                <h3>Count</h3>\r\n                <table>\r\n                    <tbody>\r\n                        {CountList}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component }  from 'react';\r\n\r\nexport default class PieGraph extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <h3>Pie Graph</h3>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport ColumnGraph from './ColumnGraph';\r\nimport Count from './Count';\r\nimport PieGraph from './PieGraph'\r\n\r\nexport default class extends Component{\r\n    render() {\r\n        return (\r\n            <div className=\"Stats\">\r\n                <div className=\"Count\">\r\n                    <Count />\r\n                </div>\r\n                <div className=\"ColumnGraph\">\r\n                    <ColumnGraph />\r\n                </div>\r\n                <div className=\"PieGraph\">\r\n                    <PieGraph />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class Mood extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            mood: {\r\n                name: this.props.name || \"default\",\r\n                color: this.props.color || \"white\"\r\n            }\r\n        };\r\n\r\n    this.changeMood = this.changeMood.bind(this);\r\n    }\r\n\r\n    changeMood(){\r\n\r\n        const colorCycles = [ \r\n            {\r\n                current: \"white\",\r\n                next: \"red\"\r\n            },\r\n            {\r\n                current: \"red\",\r\n                next: \"orange\",\r\n            },\r\n            {\r\n                current: \"orange\",\r\n                next: \"yellow\",\r\n            },\r\n            {\r\n                current: \"yellow\",\r\n                next: \"blue\",\r\n            },\r\n            {\r\n                current: \"blue\",\r\n                next: \"green\",\r\n            },\r\n            {\r\n                current: \"green\",\r\n                next: \"white\",\r\n            }\r\n        ]\r\n\r\n        colorCycles.map((colorCycle, index) => {\r\n            if(this.state.mood.color === colorCycle.current){\r\n                return this.setState({mood:{name:this.state.mood.name, color: colorCycle.next}});\r\n            }\r\n            return null;\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const buttonStyle = {\r\n            backgroundColor: \"white\"\r\n        };\r\n\r\n        let color = this.state.mood.color;\r\n        let moodName = \"\";\r\n        let button = <button className=\"MoodRating\" style={buttonStyle} onClick={this.changeMood}></button>;\r\n\r\n        if(color){\r\n            buttonStyle.backgroundColor = color;\r\n        }\r\n\r\n        if(this.props.name){\r\n            moodName = <span className=\"MoodName\">{this.props.name}</span>;\r\n        }\r\n\r\n        if(this.props.TOCButton){\r\n            button = <button className=\"MoodRating\" style={buttonStyle} disabled></button>\r\n        }\r\n\r\n        return (\r\n            <div className=\"CalendarCell\">\r\n                {moodName}\r\n                {button}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Mood from '../Calendar/Mood';\r\n\r\nexport default class extends Component{\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n        }\r\n      }\r\n      render() {\r\n    \r\n        const ListOfMoods = [];\r\n        const moods =  [\r\n          {\r\n            name: \"Horrible\", \r\n            color: \"Red\"\r\n          }, \r\n          {\r\n            name: \"Bad\", \r\n            color: \"Orange\"\r\n          },\r\n          {\r\n            name: \"Average\", \r\n            color: \"Yellow\"\r\n          },\r\n          {\r\n            name: \"Good\", \r\n            color: \"Blue\"\r\n          },\r\n          {\r\n            name: \"Great\", \r\n            color: \"Green\"\r\n          }\r\n        ]\r\n    \r\n        moods.map((mood, index) => {\r\n          return ListOfMoods.push(<Mood TOCButton = {true} name={mood.name} color={mood.color} key ={index}/>);\r\n        })\r\n    \r\n        return (\r\n          <div>\r\n            {ListOfMoods}\r\n          </div>\r\n        )\r\n      }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class ColumnOfNumbers extends Component {\r\n    render() {\r\n        const days = [];\r\n\r\n        for(let i = 0; i < 32; i++){\r\n            days.push(<div key ={i} className=\"CalendarCell\">{i}</div>);\r\n        }\r\n\r\n        return (\r\n            <div className=\"CalendarColumn\">{days}</div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Mood from './Mood'\r\n\r\nexport default class Month extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            month: {\r\n                name: this.props.name,\r\n                days: this.props.days\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n\r\n        const buttons = [];\r\n\r\n        for(let i = 0; i < this.state.month.days; i++){\r\n            buttons.push(<Mood TOCButton = {false} key={i} />);\r\n        }\r\n\r\n        return (\r\n            <div className = \"CalendarColumn\">\r\n                <div className = \"CalendarCell\">\r\n                    {this.state.month.name[0]}\r\n                </div>\r\n                {buttons}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport ColumnOfNumbers from './ColumnOfNumbers'\r\nimport Month from './Month'\r\n\r\nexport default class extends Component{\r\n    constructor(props){\r\n        super(props)\r\n            this.state = {\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const ListOfMonthsAndDays = [\r\n            {\r\n                name: \"January\",\r\n                days: 31\r\n            },\r\n            {\r\n                name: \"Febuary\",\r\n                days: 29\r\n            },\r\n            {\r\n                name: \"March\",\r\n                days: 31\r\n            },\r\n            {\r\n                name: \"April\",\r\n                days: 30\r\n            },\r\n            {\r\n                name: \"May\",\r\n                days: 31\r\n            },\r\n            {\r\n                name: \"June\",\r\n                days: 30\r\n            },\r\n            {\r\n                name: \"July\",\r\n                days: 31\r\n            },\r\n            {\r\n                name: \"August\",\r\n                days: 31\r\n            },\r\n            {\r\n                name: \"September\",\r\n                days: 30\r\n            },\r\n            {\r\n                name: \"October\",\r\n                days: 31\r\n            },\r\n            {\r\n                name: \"November\",\r\n                days: 30\r\n            },\r\n            {\r\n                name: \"December\",\r\n                days: 31\r\n            }\r\n        ]\r\n\r\n        const columnOfMonths = [];\r\n\r\n        ListOfMonthsAndDays.map((month, index) => {\r\n            return columnOfMonths.push(<Month name={month.name} days={month.days} key={index} />)\r\n        });\r\n\r\n        return (\r\n            <div className=\"Calendar\">\r\n                <ColumnOfNumbers />\r\n                {columnOfMonths}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Stats from './Components/Stats'\r\nimport TableOfContents from './Components/TableOfContents'\r\nimport Calendar from './Components/Calendar'\r\nimport './Contents/CSS/App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n    }\r\n    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"Buffer\">\r\n          <h2>Table of Contents</h2>\r\n          <TableOfContents />\r\n        </div>\r\n        <div className=\"Calendar\">\r\n        <h2>Calendar</h2>\r\n          <Calendar />\r\n        </div>\r\n        <div className=\"Buffer\">\r\n          <h2>Stats</h2>\r\n          <Stats />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Contents/CSS/index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}