{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ColumnOfNumbers","days","i","push","react_default","a","createElement","key","className","Component","Mood","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","mood","name","color","buttonStyle","backgroundColor","style","onClick","changeMood","Month","_this2","month","buttons","App_Mood","Calendar","_this3","months","columnOfMonths","map","index","App_Month","App_ColumnOfNumbers","TableOfContents","ListOfMoods","Moods","App","_this4","moods","App_TableOfContents","App_Calendar","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAGMA,0LAIF,IAFA,IAAMC,EAAO,GAELC,EAAI,EAAGA,EAAI,GAAIA,IAErBD,EAAKE,KAAKC,EAAAC,EAAAC,cAAA,OAAKC,IAAML,EAAGM,UAAU,gBAAgBN,IAGpD,OACEE,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBAAkBP,UAVTQ,cAexBC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAM,CACJC,KAAKT,EAAKD,MAAMU,KAChBC,MAAMV,EAAKD,MAAMW,QALJV,wEAYjB,IAAIU,EAAQP,KAAKI,MAAMC,KAAKE,MAEtBC,EAAc,CAClBC,gBAAiB,SAOnB,OAJGF,IACDC,EAAYC,gBAAkBF,GAI9BlB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACbJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,YAAYO,KAAKI,MAAMC,KAAKC,MAC5CjB,EAAAC,EAAAC,cAAA,UAAQE,UAAU,aAAaiB,MAAOF,EAAaG,QAASX,KAAKY,qBA1BtDlB,aAgCbmB,cACJ,SAAAA,EAAYjB,GAAO,IAAAkB,EAAA,OAAAhB,OAAAC,EAAA,EAAAD,CAAAE,KAAAa,IACjBC,EAAAhB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAe,GAAAV,KAAAH,KAAMJ,KACDQ,MAAQ,CACXW,MAAO,CACLT,KAAMQ,EAAKlB,MAAMU,KACjBpB,KAAM4B,EAAKlB,MAAMV,OALJ4B,wEAajB,IAFA,IAAME,EAAU,GAER7B,EAAI,EAAGA,EAAIa,KAAKI,MAAMW,MAAM7B,KAAMC,IAExC6B,EAAQ5B,KAAKC,EAAAC,EAAAC,cAAC0B,EAAD,CAAMzB,IAAKL,KAG1B,OACEE,EAAAC,EAAAC,cAAA,OAAKE,UAAY,kBACfJ,EAAAC,EAAAC,cAAA,OAAKE,UAAY,gBACdO,KAAKI,MAAMW,MAAMT,KAAK,IAExBU,UAxBWtB,aA8BdwB,cACJ,SAAAA,EAAYtB,GAAM,IAAAuB,EAAA,OAAArB,OAAAC,EAAA,EAAAD,CAAAE,KAAAkB,IAChBC,EAAArB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoB,GAAAf,KAAAH,KAAMJ,KACDQ,MAAQ,CACXgB,OAAQ,CACN,CACEd,KAAM,UACNpB,KAAM,IAER,CACEoB,KAAM,UACNpB,KAAM,IAER,CACEoB,KAAM,QACNpB,KAAM,IAER,CACEoB,KAAM,QACNpB,KAAM,IAER,CACEoB,KAAM,MACNpB,KAAM,IAER,CACEoB,KAAM,OACNpB,KAAM,IAER,CACEoB,KAAM,OACNpB,KAAM,IAER,CACEoB,KAAM,SACNpB,KAAM,IAER,CACEoB,KAAM,YACNpB,KAAM,IAER,CACEoB,KAAM,UACNpB,KAAM,IAER,CACEoB,KAAM,WACNpB,KAAM,IAER,CACEoB,KAAM,WACNpB,KAAM,MAlDIiC,wEAyDd,IAAME,EAAiB,GAMzB,OAJErB,KAAKI,MAAMgB,OAAOE,IAAI,SAACP,EAAOQ,GAC5BF,EAAejC,KAAKC,EAAAC,EAAAC,cAACiC,EAAD,CAAOlB,KAAMS,EAAMT,KAAMpB,KAAM6B,EAAM7B,KAAMM,IAAK+B,OAItElC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACbJ,EAAAC,EAAAC,cAACkC,EAAD,MACCJ,UAnEc3B,aAyEjBgC,mLAGF,IAAMC,EAAc,GAMpB,OAJA3B,KAAKJ,MAAMgC,MAAMN,IAAI,SAACjB,EAAMkB,GAC1BI,EAAYvC,KAAKC,EAAAC,EAAAC,cAAC0B,EAAD,CAAMX,KAAMD,EAAKC,KAAMC,MAAOF,EAAKE,MAAOf,IAAM+B,OAIjElC,EAAAC,EAAAC,cAAA,WACGoC,UAXqBjC,aA6DfmC,cA3Cb,SAAAA,EAAYjC,GAAO,IAAAkC,EAAA,OAAAhC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6B,IACjBC,EAAAhC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+B,GAAA1B,KAAAH,KAAMJ,KACDQ,MAAQ,CACX2B,MAAO,CACL,CACEzB,KAAM,WACNC,MAAO,OAET,CACED,KAAM,MACNC,MAAO,UAET,CACED,KAAM,UACNC,MAAO,UAET,CACED,KAAM,OACNC,MAAO,QAET,CACED,KAAM,QACNC,MAAO,WAtBIuB,wEA6BjB,OACEzC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAACyC,EAAD,CAAiBJ,MAAO5B,KAAKI,MAAM2B,SAErC1C,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACbJ,EAAAC,EAAAC,cAAC0C,EAAD,OAEF5C,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBAtCPC,aC9JEwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3f85a817.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass ColumnOfNumbers extends Component {\r\n  render() {\r\n    const days = [];\r\n\r\n    for(let i = 0; i < 32; i++)\r\n    {\r\n      days.push(<div key ={i} className=\"CalendarCell\">{i}</div>);\r\n    }\r\n\r\n    return (\r\n      <div className=\"CalendarColumn\">{days}</div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Mood extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      mood: {\r\n        name:this.props.name,\r\n        color:this.props.color\r\n      }\r\n    }\r\n  }\r\n  \r\n  render() {\r\n\r\n    let color = this.state.mood.color;\r\n\r\n    const buttonStyle = {\r\n      backgroundColor: \"white\"\r\n    };\r\n\r\n    if(color){\r\n      buttonStyle.backgroundColor = color;\r\n    }\r\n\r\n    return (\r\n      <div className=\"CalendarCell\">\r\n        <span className=\"MoodName\">{this.state.mood.name}</span>\r\n        <button className=\"MoodRating\" style={buttonStyle} onClick={this.changeMood}></button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Month extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      month: {\r\n        name: this.props.name,\r\n        days: this.props.days\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    \r\n    const buttons = [];\r\n\r\n    for(let i = 0; i < this.state.month.days; i++)\r\n    {\r\n      buttons.push(<Mood key={i} />);\r\n    }\r\n\r\n    return (\r\n      <div className = \"CalendarColumn\">\r\n        <div className = \"CalendarCell\">\r\n          {this.state.month.name[0]}\r\n        </div>\r\n        {buttons}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Calendar extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      months: [\r\n        {\r\n          name: \"January\",\r\n          days: 31\r\n        },\r\n        {\r\n          name: \"Febuary\",\r\n          days: 29\r\n        },\r\n        {\r\n          name: \"March\",\r\n          days: 31\r\n        },\r\n        {\r\n          name: \"April\",\r\n          days: 30\r\n        },\r\n        {\r\n          name: \"May\",\r\n          days: 31\r\n        },\r\n        {\r\n          name: \"June\",\r\n          days: 30\r\n        },\r\n        {\r\n          name: \"July\",\r\n          days: 31\r\n        },\r\n        {\r\n          name: \"August\",\r\n          days: 31\r\n        },\r\n        {\r\n          name: \"September\",\r\n          days: 30\r\n        },\r\n        {\r\n          name: \"October\",\r\n          days: 31\r\n        },\r\n        {\r\n          name: \"November\",\r\n          days: 30\r\n        },\r\n        {\r\n          name: \"December\",\r\n          days: 31\r\n        }\r\n      ]\r\n    }\r\n  }\r\n    render() {\r\n\r\n      const columnOfMonths = [];\r\n\r\n      this.state.months.map((month, index) => {\r\n        columnOfMonths.push(<Month name={month.name} days={month.days} key={index} />)\r\n      });\r\n\r\n    return (\r\n      <div className=\"Calendar\">\r\n        <ColumnOfNumbers />\r\n        {columnOfMonths}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass TableOfContents extends Component {\r\n  render() {\r\n\r\n    const ListOfMoods = [];\r\n\r\n    this.props.Moods.map((mood, index) => {\r\n      ListOfMoods.push(<Mood name={mood.name} color={mood.color} key ={index}/>);\r\n    })\r\n\r\n    return (\r\n      <div>\r\n        {ListOfMoods}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      moods: [\r\n        {\r\n          name: \"Horrible\", \r\n          color: \"Red\"\r\n        }, \r\n        {\r\n          name: \"Bad\", \r\n          color: \"Orange\"\r\n        },\r\n        {\r\n          name: \"Average\", \r\n          color: \"Yellow\"\r\n        },\r\n        {\r\n          name: \"Good\", \r\n          color: \"Blue\"\r\n        },\r\n        {\r\n          name: \"Great\", \r\n          color: \"Green\"\r\n        }\r\n      ]\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n          <div className=\"Buffer\">\r\n            <TableOfContents Moods={this.state.moods}/>\r\n          </div>\r\n          <div className=\"Calendar\">\r\n            <Calendar />\r\n          </div>\r\n          <div className=\"Buffer\"></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}