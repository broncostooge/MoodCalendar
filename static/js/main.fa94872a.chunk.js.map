{"version":3,"sources":["Components/Stats/ColumnGraph.js","Components/Stats/Count.js","Components/Stats/PieGraph.js","Components/Stats/index.js","reducers/index.js","store/index.js","Components/Calendar/Mood.js","Components/TableOfContents/index.js","Components/Calendar/ColumnOfNumbers.js","Components/Calendar/Month.js","Components/Calendar/index.js","App.js","serviceWorker.js","index.js"],"names":["ColumnGraph","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","name","Horrible","Bad","Average","Good","Great","react_default","a","createElement","BarChart","width","height","margin","top","right","left","bottom","CartesianGrid","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","fill","Component","connect","Count","_this2","CountList","CountOutput","countList","index","moodCount","push","key","className","color","map","mood","PieGraph","value","COLORS","PieChart","onMouseEnter","onPieEnter","Pie","cx","cy","innerRadius","outerRadius","paddingAngle","entry","Cell","length","Stats","Stats_Count","Stats_ColumnGraph","Stats_PieGraph","initialState","persistConfig","storage","stateReconciler","autoMergeLevel2","persistedReducer","persistReducer","arguments","undefined","action","newState","objectSpread","type","store","createStore","persistor","persistStore","Mood","onOpenModal","setState","open","onCloseModal","month","day","localStorage","getItem","note","colorToChangeTo","dispatch","colorChangingFrom","dispatchIncreaseMoodToStore","dispatchDecreaseMoodToStore","setItem","noteText","document","getElementById","noteSaved","style","display","setTimeout","button","buttonStyle","backgroundColor","output","colorOfMood","TOCButton","LeapYearDay","Math","random","id","onClick","disabled","index_es","onEntered","setTextArea","onClose","center","changeMood","saveNote","_default","e","sel","leapYearButton","options","selectedIndex","text","removeItem","ListOfMoods","Mood_Mood","onChange","handleChange","bind","ColumnOfNumbers","days","i","Month","buttons","columnOfMonths","CreateArrayOfMonthsAndDays","assertThisInitialized","months","Month_Month","ColumnOfNumbers_ColumnOfNumbers","App","console","log","es","integration_react","loading","TableOfContents_default","Calendar_default","Stats_Stats","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fa94872a.chunk.js","sourcesContent":["import React, { Component }  from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\r\n\r\nclass ColumnGraph extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const data = [\r\n            {name: 'Horrible', Horrible: this.props.Horrible},\r\n            {name: 'Bad', Bad: this.props.Bad},\r\n            {name: 'Average', Average: this.props.Average},\r\n            {name: 'Good', Good: this.props.Good},\r\n            {name: 'Great', Great: this.props.Great}\r\n        ];\r\n\r\n        return (\r\n            <div>\r\n                <h3>Column Graph</h3>\r\n                <BarChart width={600} height={300} data={data}\r\n                    margin={{top: 5, right: 30, left: 20, bottom: 5}}>\r\n                    <CartesianGrid />\r\n                    <XAxis dataKey=\"name\"/>\r\n                    <YAxis/>\r\n                    <Tooltip/>\r\n                    <Legend />\r\n                    <Bar dataKey=\"Horrible\" fill=\"red\" />\r\n                    <Bar dataKey=\"Bad\" fill=\"orange\" />\r\n                    <Bar dataKey=\"Average\" fill=\"yellow\" />\r\n                    <Bar dataKey=\"Good\" fill=\"blue\" />\r\n                    <Bar dataKey=\"Great\" fill=\"green\" />\r\n                </BarChart>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return { \r\n        Horrible: state.Horrible,\r\n        Bad:state.Bad,\r\n        Average:state.Average,\r\n        Good:state.Good,\r\n        Great:state.Great \r\n    };\r\n  }\r\n\r\nexport default connect(mapStateToProps)(ColumnGraph);","import React, { Component }  from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Count extends Component {\r\n    constructor(props){\r\n        super(props)\r\n          this.state = {\r\n        }\r\n      }\r\n\r\n    render() {\r\n        const moods =  [\r\n            {\r\n                name: \"Horrible\", \r\n                color: \"Red\"\r\n            }, \r\n            {\r\n                name: \"Bad\", \r\n                color: \"Orange\"\r\n            },\r\n            {\r\n                name: \"Average\", \r\n                color: \"Yellow\"\r\n            },\r\n            {\r\n                name: \"Good\", \r\n                color: \"Blue\"\r\n            },\r\n            {\r\n                name: \"Great\", \r\n                color: \"Green\"\r\n            }\r\n        ]\r\n\r\n        let CountList = []\r\n\r\n        function CountOutput(countList, name, index, moodCount){\r\n            return countList.push(<tr key={index}>{name}: <td key={index} className={name+'Count'}>{moodCount}</td></tr>);\r\n        }\r\n\r\n        moods.map((mood, index) => {\r\n            if(mood.name === \"Horrible\"){\r\n                CountOutput(CountList, mood.name, index, this.props.Horrible);\r\n            }\r\n            if(mood.name === \"Bad\"){\r\n                CountOutput(CountList, mood.name, index, this.props.Bad);\r\n            }\r\n            if(mood.name === \"Average\"){\r\n                CountOutput(CountList, mood.name, index, this.props.Average);\r\n            }\r\n            if(mood.name === \"Good\"){\r\n                CountOutput(CountList, mood.name, index, this.props.Good);\r\n            }\r\n            if(mood.name === \"Great\"){\r\n                CountOutput(CountList, mood.name, index, this.props.Great);\r\n            }\r\n\r\n            return -1;\r\n        })\r\n\r\n        return (\r\n            <div>\r\n                <h3>Count</h3>\r\n                <table>\r\n                    <tbody>\r\n                        {CountList}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return { \r\n        Horrible: state.Horrible,\r\n        Bad:state.Bad,\r\n        Average:state.Average,\r\n        Good:state.Good,\r\n        Great:state.Great \r\n    };\r\n  }\r\n\r\nexport default connect(mapStateToProps)(Count);\r\n","import React, { Component }  from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { PieChart, Pie, Cell, Legend } from 'recharts';\r\n\r\nclass PieGraph extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const data = [\r\n            {name: 'Horrible', value: this.props.Horrible}, \r\n            {name: 'Bad', value: this.props.Bad},\r\n            {name: 'Average', value: this.props.Average}, \r\n            {name: 'Good', value: this.props.Good}, \r\n            {name: 'Great', value: this.props.Great}\r\n        ];\r\n        const COLORS = ['red', 'orange', 'yellow', 'blue', 'green'];   \r\n\r\n        return (\r\n            <div>\r\n                <h3>Pie Graph</h3>\r\n                <PieChart width={800} height={400} onMouseEnter={this.onPieEnter}>\r\n                <Pie\r\n                dataKey=\"value\"\r\n                data={data} \r\n                cx={400} \r\n                cy={125} \r\n                innerRadius={60}\r\n                outerRadius={80} \r\n                fill=\"#8884d8\"\r\n                paddingAngle={5}\r\n                >\r\n                    {\r\n                        data.map((entry, index) => <Cell key={index} fill={COLORS[index % COLORS.length]}/>)\r\n                    }\r\n                <Legend />\r\n                </Pie>\r\n            </PieChart>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return { \r\n        Horrible: state.Horrible,\r\n        Bad:state.Bad,\r\n        Average:state.Average,\r\n        Good:state.Good,\r\n        Great:state.Great \r\n    };\r\n  }\r\n\r\nexport default connect(mapStateToProps)(PieGraph);","import React, { Component } from 'react';\r\nimport ColumnGraph from './ColumnGraph';\r\nimport Count from './Count';\r\nimport PieGraph from './PieGraph'\r\n\r\nexport default class Stats extends Component{\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"Stats\">\r\n                <div className=\"Count\">\r\n                    <Count />\r\n                </div>\r\n                <div className=\"ColumnGraph\">\r\n                    <ColumnGraph />\r\n                </div>\r\n                <div className=\"PieGraph\">\r\n                    <PieGraph />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","const initialState = {\r\n    Horrible:0,\r\n    Bad:0,\r\n    Average:0,\r\n    Good:0,\r\n    Great:0\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const newState = {...state};\r\n    \r\n    //HORRIBLE\r\n    if(action.type === 'INCREASE_HORRIBLE_MOOD_COUNT'){\r\n        newState.Horrible += 1;\r\n    }\r\n    if(action.type === 'DECREASE_HORRIBLE_MOOD_COUNT'){\r\n        newState.Horrible -= 1;\r\n    }\r\n\r\n    //BAD\r\n    if(action.type === 'INCREASE_BAD_MOOD_COUNT'){\r\n        newState.Bad += 1;\r\n    }\r\n    if(action.type === 'DECREASE_BAD_MOOD_COUNT'){\r\n        newState.Bad -= 1;\r\n    }\r\n\r\n    //AVERAGE\r\n    if(action.type === 'INCREASE_AVERAGE_MOOD_COUNT'){\r\n        newState.Average += 1;\r\n    }\r\n    if(action.type === 'DECREASE_AVERAGE_MOOD_COUNT'){\r\n        newState.Average -= 1;\r\n    }\r\n\r\n    //GOOD\r\n    if(action.type === 'INCREASE_GOOD_MOOD_COUNT'){\r\n        newState.Good += 1;\r\n    }\r\n    if(action.type === 'DECREASE_GOOD_MOOD_COUNT'){\r\n        newState.Good -= 1;\r\n    }\r\n\r\n    //GREAT\r\n    if(action.type === 'INCREASE_GREAT_MOOD_COUNT'){\r\n        newState.Great += 1;\r\n    }\r\n    if(action.type === 'DECREASE_GREAT_MOOD_COUNT'){\r\n        newState.Great -= 1;\r\n    }\r\n\r\n    return newState;\r\n}","import myReducer from '../reducers/index'\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport { createStore } from 'redux';\r\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage: storage,\r\n    stateReconciler: autoMergeLevel2 // see \"Merge Process\" section for details.\r\n   };\r\n  \r\nconst persistedReducer = persistReducer(persistConfig, myReducer)\r\n\r\nexport const store = createStore(persistedReducer);\r\nexport const persistor = persistStore(store);\r\n","import React, { Component } from 'react';\r\nimport { store } from '../../store';\r\nimport Modal from 'react-responsive-modal';\r\n\r\nexport default class Mood extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            mood: {\r\n                name: this.props.name || \"default\",\r\n                month: this.props.month,\r\n                day: this.props.day,\r\n                color: localStorage.getItem(this.props.month + ' ' + this.props.day) || this.props.color || \"white\",\r\n                note: \"\"\r\n            },\r\n            open: false,\r\n        };\r\n    }\r\n\r\n    onOpenModal = () => {\r\n        this.setState({ open: true });\r\n    };\r\n\r\n    onCloseModal = () => {\r\n        this.setState({ open: false });\r\n    };\r\n    \r\n    dispatchIncreaseMoodToStore(colorToChangeTo){\r\n        switch(colorToChangeTo){\r\n            case \"red\":\r\n                store.dispatch({ type: 'INCREASE_HORRIBLE_MOOD_COUNT' });\r\n                break;\r\n            case \"orange\":\r\n                store.dispatch({ type: 'INCREASE_BAD_MOOD_COUNT' });\r\n                break;\r\n            case \"yellow\":\r\n                store.dispatch({ type: 'INCREASE_AVERAGE_MOOD_COUNT' });\r\n                break;\r\n            case \"blue\":\r\n                store.dispatch({ type: 'INCREASE_GOOD_MOOD_COUNT' });\r\n                break;\r\n            case \"green\":\r\n                store.dispatch({ type: 'INCREASE_GREAT_MOOD_COUNT' });\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    dispatchDecreaseMoodToStore(colorChangingFrom){\r\n        switch(colorChangingFrom){\r\n            case \"red\":\r\n                store.dispatch({ type: 'DECREASE_HORRIBLE_MOOD_COUNT' });\r\n                break;\r\n            case \"orange\":\r\n                store.dispatch({ type: 'DECREASE_BAD_MOOD_COUNT' });\r\n                break;\r\n            case \"yellow\":\r\n                store.dispatch({ type: 'DECREASE_AVERAGE_MOOD_COUNT' });\r\n                break;\r\n            case \"blue\":\r\n                store.dispatch({ type: 'DECREASE_GOOD_MOOD_COUNT' });\r\n                break;\r\n            case \"green\":\r\n                store.dispatch({ type: 'DECREASE_GREAT_MOOD_COUNT' });\r\n                break;\r\n            default:\r\n        }\r\n\r\n    }\r\n\r\n    changeMood(colorToChangeTo, colorChangingFrom){\r\n        \r\n        this.dispatchIncreaseMoodToStore(colorToChangeTo);\r\n\r\n        this.dispatchDecreaseMoodToStore(colorChangingFrom);\r\n        \r\n        localStorage.setItem(this.props.month + ' ' + this.props.day, colorToChangeTo);\r\n        \r\n        this.setState({mood:{name:this.state.mood.name, month:this.state.mood.month, day:this.state.mood.day, color:colorToChangeTo, note:this.state.mood.note}});\r\n    }\r\n\r\n    saveNote(){\r\n        const noteText =  document.getElementById(\"NoteTextArea\");\r\n        const noteSaved = document.getElementById(\"NoteSaved\");\r\n\r\n        this.setState({mood:{name:this.state.mood.name, month:this.state.mood.month, day:this.state.mood.day, color:this.state.mood.color, note: noteText.value}});\r\n        noteSaved.style.display = \"block\";\r\n\r\n    }\r\n\r\n    setTextArea(note){\r\n        setTimeout(function(){\r\n            if(document.getElementById(\"NoteTextArea\")){\r\n                document.getElementById(\"NoteTextArea\").value = note;\r\n            }\r\n        }, 10);\r\n    }\r\n\r\n    render() {\r\n\r\n        const buttonStyle = {\r\n            backgroundColor: \"white\"\r\n        };\r\n\r\n        const output = [];\r\n\r\n        let button;\r\n\r\n        buttonStyle.backgroundColor = this.state.mood.color;\r\n\r\n        const colorOfMood = localStorage.getItem(this.state.mood.month + ' ' + this.state.mood.day);\r\n\r\n        if(colorOfMood && !this.props.TOCButton){\r\n            buttonStyle.backgroundColor = colorOfMood;\r\n        }\r\n\r\n        if(this.props.LeapYearDay){\r\n            button = <button key={Math.random} className = \"MoodRating\" id=\"LeapYearDay\" style={buttonStyle} onClick={() => {this.onOpenModal()}}></button>;\r\n        }else if(this.props.TOCButton){\r\n            button = <button key={Math.random} className=\"MoodRating\" style={buttonStyle} disabled></button>\r\n        }\r\n        else{\r\n            button = <button key={Math.random} className=\"MoodRating\" style={buttonStyle} onClick={() => {this.onOpenModal()}}></button>;\r\n        }\r\n\r\n        if(this.props.name){\r\n            output.push(<span key={this.props.name} className=\"MoodName\">{this.props.name}</span>)\r\n        }\r\n\r\n        output.push(button);\r\n\r\n        return (\r\n            <div className=\"CalendarCell\">\r\n                <Modal onEntered={this.setTextArea(this.state.mood.note)} open={this.state.open} onClose={this.onCloseModal} center>\r\n                    <div className=\"ModalWindow\">\r\n                        <div className=\"LeftSideModal\">\r\n                            <div>\r\n                                <button className=\"ModalHorribleButton MoodRating ModalButton\" onClick={() => {this.changeMood(\"red\", this.state.mood.color)}}></button>Horrible\r\n                            </div>\r\n                            <div>\r\n                                <button className=\"ModalBadButton MoodRating ModalButton\" onClick={() => {this.changeMood(\"orange\", this.state.mood.color)}}></button>Bad\r\n                            </div>\r\n                            <div>\r\n                                <button className=\"ModalAverageButton MoodRating ModalButton\" onClick={() => {this.changeMood(\"yellow\", this.state.mood.color)}}></button>Average \r\n                            </div>\r\n                            <div>\r\n                                <button className=\"ModalGoodButton MoodRating ModalButton\" onClick={() => {this.changeMood(\"blue\", this.state.mood.color)}}></button>Good\r\n                            </div>\r\n                            <div>\r\n                                <button className=\"ModalGreatButton MoodRating ModalButton\" onClick={() => {this.changeMood(\"green\", this.state.mood.color)}}></button>Great\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"RightSideModal\">\r\n                            <h2>Leave A Note About The Day</h2>\r\n                            <textarea id=\"NoteTextArea\">{this.state.note}</textarea>\r\n                            <button onClick={() => {this.saveNote()}}>Save Note</button>\r\n                            <span id=\"NoteSaved\">Note Saved</span>\r\n                        </div>\r\n                    </div>\r\n                </Modal>\r\n                {output}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Mood from '../Calendar/Mood';\r\nimport { store } from '../../store'\r\n\r\nexport default class extends Component{\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n        }\r\n      }\r\n      \r\n      handleChange(e){\r\n        const sel = document.getElementById(\"LeapYearSelect\");\r\n        let leapYearButton = document.getElementById(\"LeapYearDay\");\r\n        let text= sel.options[sel.selectedIndex].text;\r\n\r\n        if(text === \"Yes\"){\r\n          leapYearButton.style.display = \"\";\r\n        }\r\n        else{\r\n          leapYearButton.style.display = \"none\";\r\n\r\n          if(leapYearButton.style.backgroundColor === \"red\"){\r\n            store.dispatch({ type: 'DECREASE_HORRIBLE_MOOD_COUNT' });\r\n          }\r\n          else if(leapYearButton.style.backgroundColor === \"orange\"){\r\n            store.dispatch({ type: 'DECREASE_BAD_MOOD_COUNT' });\r\n          }\r\n          else if(leapYearButton.style.backgroundColor === \"yellow\"){\r\n            store.dispatch({ type: 'DECREASE_AVERAGE_MOOD_COUNT' });\r\n          }\r\n          else if(leapYearButton.style.backgroundColor === \"blue\"){\r\n            store.dispatch({ type: 'DECREASE_GOOD_MOOD_COUNT' });\r\n          }\r\n          else if(leapYearButton.style.backgroundColor === \"green\"){\r\n            store.dispatch({ type: 'DECREASE_GREAT_MOOD_COUNT' });\r\n          }\r\n\r\n          leapYearButton.style.backgroundColor = \"white\";\r\n          localStorage.removeItem('Febuary 28');\r\n\r\n        }\r\n      }\r\n\r\n      render() {\r\n    \r\n        const ListOfMoods = [];\r\n        const moods =  [\r\n          {\r\n            name: \"Horrible\", \r\n            color: \"Red\"\r\n          }, \r\n          {\r\n            name: \"Bad\", \r\n            color: \"Orange\"\r\n          },\r\n          {\r\n            name: \"Average\", \r\n            color: \"Yellow\"\r\n          },\r\n          {\r\n            name: \"Good\", \r\n            color: \"Blue\"\r\n          },\r\n          {\r\n            name: \"Great\", \r\n            color: \"Green\"\r\n          }\r\n        ]\r\n    \r\n        moods.map((mood, index) => {\r\n          return ListOfMoods.push(<Mood TOCButton = {true} name={mood.name} color={mood.color} key ={index}/>);\r\n        })\r\n\r\n        return (\r\n          <div>\r\n            Leap Year\r\n            <select id=\"LeapYearSelect\" onChange={this.handleChange.bind(this)}>\r\n              <option value=\"Yes\">Yes</option>\r\n              <option value=\"No\">No</option>\r\n            </select>\r\n              {ListOfMoods}\r\n          </div>\r\n        )\r\n      }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class ColumnOfNumbers extends Component {\r\n    render() {\r\n        const days = [];\r\n\r\n        for(let i = 0; i < 32; i++){\r\n            if(i === 0){\r\n                days.push(<div key ={i} className=\"CalendarCell FirstColumnNumber\"></div>);\r\n            }else{\r\n                days.push(<div key ={i} className=\"CalendarCell\">{i}</div>);\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"CalendarColumn\">{days}</div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Mood from './Mood'\r\n\r\nexport default class Month extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            month: {\r\n                name: this.props.name,\r\n                days: this.props.days\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n\r\n        const buttons = [];\r\n\r\n        for(let i = 0; i < this.state.month.days; i++){\r\n            if(this.state.month.name === \"Febuary\" && i === 28){\r\n                buttons.push(<Mood LeapYearDay={true} TOCButton = {false} key={i} month={this.state.month.name} day={i} />);\r\n            }else{\r\n                buttons.push(<Mood TOCButton = {false} key={i} month={this.state.month.name} day={i} />);\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className = \"CalendarColumn\">\r\n                <div className = \"CalendarCell\">\r\n                    {this.state.month.name[0]}\r\n                </div>\r\n                {buttons}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport ColumnOfNumbers from './ColumnOfNumbers'\r\nimport Month from './Month'\r\n\r\nexport default class extends Component{\r\n    constructor(props){\r\n        super(props)\r\n            this.state = {\r\n                columnOfMonths : []\r\n        };\r\n\r\n        this.CreateArrayOfMonthsAndDays = this.CreateArrayOfMonthsAndDays.bind(this);\r\n    }\r\n\r\n    CreateArrayOfMonthsAndDays(){\r\n        const ListOfMonthsAndDays = [\r\n            {\r\n                name: \"January\",\r\n                days: 31\r\n            },\r\n            {\r\n                name: \"Febuary\",\r\n                days: 29\r\n            },\r\n            {\r\n                name: \"March\",\r\n                days: 31\r\n            },\r\n            {\r\n                name: \"April\",\r\n                days: 30\r\n            },\r\n            {\r\n                name: \"May\",\r\n                days: 31\r\n            },\r\n            {\r\n                name: \"June\",\r\n                days: 30\r\n            },\r\n            {\r\n                name: \"July\",\r\n                days: 31\r\n            },\r\n            {\r\n                name: \"August\",\r\n                days: 31\r\n            },\r\n            {\r\n                name: \"September\",\r\n                days: 30\r\n            },\r\n            {\r\n                name: \"October\",\r\n                days: 31\r\n            },\r\n            {\r\n                name: \"November\",\r\n                days: 30\r\n            },\r\n            {\r\n                name: \"December\",\r\n                days: 31\r\n            }\r\n        ]\r\n\r\n        const months = [];\r\n\r\n        ListOfMonthsAndDays.map((month, index) => {\r\n            return months.push(<Month name={month.name} days={month.days} key={index} />)\r\n        });\r\n\r\n        return months;\r\n    }\r\n\r\n    render() {\r\n\r\n        let months = [];\r\n\r\n        months = this.CreateArrayOfMonthsAndDays();\r\n\r\n        return (\r\n            <div className=\"Calendar\">\r\n                <ColumnOfNumbers />\r\n                {months}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Stats from './Components/Stats'\r\nimport TableOfContents from './Components/TableOfContents'\r\nimport Calendar from './Components/Calendar'\r\nimport './Contents/CSS/App.css';\r\nimport { Provider } from 'react-redux'\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\nimport { persistor, store } from './store';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    console.log(store);\r\n    return (\r\n      <Provider store={store} >\r\n        <PersistGate loading={null} persistor={persistor}>\r\n          <div className=\"App\">\r\n              <div className=\"Buffer\">\r\n                <h2>Table of Contents</h2>\r\n                <TableOfContents />\r\n              </div>\r\n              <div className=\"Calendar\">\r\n              <h2>Calendar</h2>\r\n                <Calendar />\r\n              </div>\r\n              <div className=\"Buffer\">\r\n                <h2>Stats</h2>\r\n                <Stats />\r\n              </div>\r\n          </div>\r\n        </PersistGate>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Contents/CSS/index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}