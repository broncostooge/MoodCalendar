{"version":3,"sources":["Components/Stats/ColumnGraph.js","Components/Stats/Count.js","Components/Stats/PieGraph.js","Components/Stats/index.js","reducers/index.js","store/index.js","Components/Calendar/Mood.js","Components/TableOfContents/index.js","Components/Calendar/ColumnOfNumbers.js","Components/Calendar/Month.js","Components/Calendar/index.js","App.js","serviceWorker.js","index.js"],"names":["ColumnGraph","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","Component","Count","_this2","CountList","CountOutput","countList","name","index","moodCount","push","key","className","color","map","mood","Horrible","Bad","Average","Good","Great","connect","PieGraph","console","log","data","value","COLORS","PieChart","width","height","onMouseEnter","onPieEnter","Pie","cx","cy","innerRadius","outerRadius","fill","paddingAngle","entry","Cell","length","Legend","Stats","Stats_Count","ColumnGraph_ColumnGraph","Stats_PieGraph","initialState","store","createStore","require","arguments","undefined","action","newState","objectSpread","type","Mood","changeMood","bind","assertThisInitialized","current","next","colorCycle","dispatch","setState","buttonStyle","backgroundColor","moodName","button","style","onClick","TOCButton","disabled","_default","ListOfMoods","Mood_Mood","ColumnOfNumbers","days","i","Month","month","buttons","columnOfMonths","Month_Month","ColumnOfNumbers_ColumnOfNumbers","App","es","TableOfContents_default","Calendar_default","Stats_Stats","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aaf11bcd.chunk.js","sourcesContent":["import React, { Component }  from 'react';\r\n\r\nexport default class ColumnGraph extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <h3>Column Graph</h3>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component }  from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Count extends Component {\r\n    constructor(props){\r\n        super(props)\r\n          this.state = {\r\n        }\r\n      }\r\n\r\n    render() {\r\n        const moods =  [\r\n            {\r\n                name: \"Horrible\", \r\n                color: \"Red\"\r\n            }, \r\n            {\r\n                name: \"Bad\", \r\n                color: \"Orange\"\r\n            },\r\n            {\r\n                name: \"Average\", \r\n                color: \"Yellow\"\r\n            },\r\n            {\r\n                name: \"Good\", \r\n                color: \"Blue\"\r\n            },\r\n            {\r\n                name: \"Great\", \r\n                color: \"Green\"\r\n            }\r\n        ]\r\n\r\n        let CountList = []\r\n\r\n        function CountOutput(countList, name, index, moodCount){\r\n            return countList.push(<tr key={index}>{name}: <td key={index} className={name+'Count'}>{moodCount}</td></tr>);\r\n        }\r\n\r\n        moods.map((mood, index) => {\r\n            if(mood.name === \"Horrible\"){\r\n                CountOutput(CountList, mood.name, index, this.props.Horrible);\r\n            }\r\n            if(mood.name === \"Bad\"){\r\n                CountOutput(CountList, mood.name, index, this.props.Bad);\r\n            }\r\n            if(mood.name === \"Average\"){\r\n                CountOutput(CountList, mood.name, index, this.props.Average);\r\n            }\r\n            if(mood.name === \"Good\"){\r\n                CountOutput(CountList, mood.name, index, this.props.Good);\r\n            }\r\n            if(mood.name === \"Great\"){\r\n                CountOutput(CountList, mood.name, index, this.props.Great);\r\n            }\r\n\r\n            return -1;\r\n        })\r\n\r\n        return (\r\n            <div>\r\n                <h3>Count</h3>\r\n                <table>\r\n                    <tbody>\r\n                        {CountList}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return { \r\n        Horrible: state.Horrible,\r\n        Bad:state.Bad,\r\n        Average:state.Average,\r\n        Good:state.Good,\r\n        Great:state.Great \r\n    };\r\n  }\r\n\r\nexport default connect(mapStateToProps)(Count);\r\n","import React, { Component }  from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { PieChart, Pie, Cell, Legend } from 'recharts';\r\n\r\nclass PieGraph extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log(this);\r\n        const data = [\r\n            {name: 'Horrible', value: this.props.Horrible}, \r\n            {name: 'Bad', value: this.props.Bad},\r\n            {name: 'Average', value: this.props.Average}, \r\n            {name: 'Good', value: this.props.Good}, \r\n            {name: 'Great', value: this.props.Great}\r\n        ];\r\n        const COLORS = ['red', 'orange', 'yellow', 'blue', 'green']; \r\n\r\n        return (\r\n            <div>\r\n                <h3>Pie Graph</h3>\r\n                <PieChart width={800} height={400} onMouseEnter={this.onPieEnter}>\r\n                <Pie\r\n                data={data} \r\n                cx={120} \r\n                cy={200} \r\n                innerRadius={60}\r\n                outerRadius={80} \r\n                fill=\"#8884d8\"\r\n                paddingAngle={5}\r\n                >\r\n                    {\r\n                    data.map((entry, index) => <Cell fill={COLORS[index % COLORS.length]}/>)\r\n                }\r\n                <Legend />\r\n                </Pie>\r\n            </PieChart>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return { \r\n        Horrible: state.Horrible,\r\n        Bad:state.Bad,\r\n        Average:state.Average,\r\n        Good:state.Good,\r\n        Great:state.Great \r\n    };\r\n  }\r\n\r\nexport default connect(mapStateToProps)(PieGraph);","import React, { Component } from 'react';\r\nimport ColumnGraph from './ColumnGraph';\r\nimport Count from './Count';\r\nimport PieGraph from './PieGraph'\r\n\r\nexport default class Stats extends Component{\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"Stats\">\r\n                <div className=\"Count\">\r\n                    <Count />\r\n                </div>\r\n                <div className=\"ColumnGraph\">\r\n                    <ColumnGraph />\r\n                </div>\r\n                <div className=\"PieGraph\">\r\n                    <PieGraph />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","const initialState = {\r\n    Horrible:0,\r\n    Bad:0,\r\n    Average:0,\r\n    Good:0,\r\n    Great:0\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    const newState = {...state};\r\n    \r\n    //HORRIBLE\r\n    if(action.type === 'INCREASE_HORRIBLE_MOOD_COUNT'){\r\n        newState.Horrible += 1;\r\n        console.log(newState.Horrible)\r\n    }\r\n    if(action.type === 'DECREASE_HORRIBLE_MOOD_COUNT'){\r\n        newState.Horrible -= 1;\r\n    }\r\n\r\n    //BAD\r\n    if(action.type === 'INCREASE_BAD_MOOD_COUNT'){\r\n        newState.Bad += 1;\r\n    }\r\n    if(action.type === 'DECREASE_BAD_MOOD_COUNT'){\r\n        newState.Bad -= 1;\r\n    }\r\n\r\n    //AVERAGE\r\n    if(action.type === 'INCREASE_AVERAGE_MOOD_COUNT'){\r\n        newState.Average += 1;\r\n    }\r\n    if(action.type === 'DECREASE_AVERAGE_MOOD_COUNT'){\r\n        newState.Average -= 1;\r\n    }\r\n\r\n    //GOOD\r\n    if(action.type === 'INCREASE_GOOD_MOOD_COUNT'){\r\n        newState.Good += 1;\r\n    }\r\n    if(action.type === 'DECREASE_GOOD_MOOD_COUNT'){\r\n        newState.Good -= 1;\r\n    }\r\n\r\n    //GREAT\r\n    if(action.type === 'INCREASE_GREAT_MOOD_COUNT'){\r\n        newState.Great += 1;\r\n    }\r\n    if(action.type === 'DECREASE_GREAT_MOOD_COUNT'){\r\n        newState.Great -= 1;\r\n    }\r\n\r\n    return newState;\r\n}","import myReducer from '../reducers'\r\n\r\nconst { createStore } = require('redux');\r\n\r\nconst store = createStore(myReducer);\r\n\r\nexport default store","import React, { Component } from 'react';\r\nimport store from '../../store'\r\n\r\nexport default class Mood extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            mood: {\r\n                name: this.props.name || \"default\",\r\n                color: this.props.color || \"white\"\r\n            }\r\n        };\r\n\r\n    this.changeMood = this.changeMood.bind(this);\r\n    }\r\n\r\n    changeMood(){\r\n        const colorCycles = [ \r\n            {\r\n                current: \"white\",\r\n                next: \"red\"\r\n            },\r\n            {\r\n                current: \"red\",\r\n                next: \"orange\",\r\n            },\r\n            {\r\n                current: \"orange\",\r\n                next: \"yellow\",\r\n            },\r\n            {\r\n                current: \"yellow\",\r\n                next: \"blue\",\r\n            },\r\n            {\r\n                current: \"blue\",\r\n                next: \"green\",\r\n            },\r\n            {\r\n                current: \"green\",\r\n                next: \"white\",\r\n            }\r\n        ]\r\n\r\n        colorCycles.map((colorCycle, index) => {\r\n            if(this.state.mood.color === colorCycle.current){\r\n                if(colorCycle.next === \"red\"){\r\n                    store.dispatch({ type: 'INCREASE_HORRIBLE_MOOD_COUNT' });\r\n                }\r\n                else if(colorCycle.next === \"orange\"){\r\n                    store.dispatch({ type: 'DECREASE_HORRIBLE_MOOD_COUNT' });\r\n                    store.dispatch({ type: 'INCREASE_BAD_MOOD_COUNT' });\r\n                }\r\n                else if(colorCycle.next === \"yellow\"){\r\n                    store.dispatch({ type: 'DECREASE_BAD_MOOD_COUNT' });\r\n                    store.dispatch({ type: 'INCREASE_AVERAGE_MOOD_COUNT' });\r\n                }\r\n                else if(colorCycle.next === \"blue\"){\r\n                    store.dispatch({ type: 'DECREASE_AVERAGE_MOOD_COUNT' });\r\n                    store.dispatch({ type: 'INCREASE_GOOD_MOOD_COUNT' });\r\n                }\r\n                else if(colorCycle.next === \"green\"){\r\n                    store.dispatch({ type: 'DECREASE_GOOD_MOOD_COUNT' });\r\n                    store.dispatch({ type: 'INCREASE_GREAT_MOOD_COUNT' });\r\n                }\r\n                else if(colorCycle.next === \"white\"){\r\n                    store.dispatch({ type: 'DECREASE_GREAT_MOOD_COUNT'});\r\n                }\r\n                return this.setState({mood:{name:this.state.mood.name, color: colorCycle.next}});\r\n            }\r\n            return null;\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const buttonStyle = {\r\n            backgroundColor: \"white\"\r\n        };\r\n\r\n        let color = this.state.mood.color;\r\n        let moodName = \"\";\r\n        let button = <button className=\"MoodRating\" style={buttonStyle} onClick={this.changeMood}></button>;\r\n\r\n        if(color){\r\n            buttonStyle.backgroundColor = color;\r\n        }\r\n\r\n        if(this.props.name){\r\n            moodName = <span className=\"MoodName\">{this.props.name}</span>;\r\n        }\r\n\r\n        if(this.props.TOCButton){\r\n            button = <button className=\"MoodRating\" style={buttonStyle} disabled></button>\r\n        }\r\n\r\n        return (\r\n            <div className=\"CalendarCell\">\r\n                {moodName}\r\n                {button}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Mood from '../Calendar/Mood';\r\n\r\nexport default class extends Component{\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n        }\r\n      }\r\n      render() {\r\n    \r\n        const ListOfMoods = [];\r\n        const moods =  [\r\n          {\r\n            name: \"Horrible\", \r\n            color: \"Red\"\r\n          }, \r\n          {\r\n            name: \"Bad\", \r\n            color: \"Orange\"\r\n          },\r\n          {\r\n            name: \"Average\", \r\n            color: \"Yellow\"\r\n          },\r\n          {\r\n            name: \"Good\", \r\n            color: \"Blue\"\r\n          },\r\n          {\r\n            name: \"Great\", \r\n            color: \"Green\"\r\n          }\r\n        ]\r\n    \r\n        moods.map((mood, index) => {\r\n          return ListOfMoods.push(<Mood TOCButton = {true} name={mood.name} color={mood.color} key ={index}/>);\r\n        })\r\n    \r\n        return (\r\n          <div>\r\n            {ListOfMoods}\r\n          </div>\r\n        )\r\n      }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class ColumnOfNumbers extends Component {\r\n    render() {\r\n        const days = [];\r\n\r\n        for(let i = 0; i < 32; i++){\r\n            days.push(<div key ={i} className=\"CalendarCell\">{i}</div>);\r\n        }\r\n\r\n        return (\r\n            <div className=\"CalendarColumn\">{days}</div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Mood from './Mood'\r\n\r\nexport default class Month extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            month: {\r\n                name: this.props.name,\r\n                days: this.props.days\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n\r\n        const buttons = [];\r\n\r\n        for(let i = 0; i < this.state.month.days; i++){\r\n            buttons.push(<Mood TOCButton = {false} key={i} />);\r\n        }\r\n\r\n        return (\r\n            <div className = \"CalendarColumn\">\r\n                <div className = \"CalendarCell\">\r\n                    {this.state.month.name[0]}\r\n                </div>\r\n                {buttons}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport ColumnOfNumbers from './ColumnOfNumbers'\r\nimport Month from './Month'\r\n\r\nexport default class extends Component{\r\n    constructor(props){\r\n        super(props)\r\n            this.state = {\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const ListOfMonthsAndDays = [\r\n            {\r\n                name: \"January\",\r\n                days: 31\r\n            },\r\n            {\r\n                name: \"Febuary\",\r\n                days: 29\r\n            },\r\n            {\r\n                name: \"March\",\r\n                days: 31\r\n            },\r\n            {\r\n                name: \"April\",\r\n                days: 30\r\n            },\r\n            {\r\n                name: \"May\",\r\n                days: 31\r\n            },\r\n            {\r\n                name: \"June\",\r\n                days: 30\r\n            },\r\n            {\r\n                name: \"July\",\r\n                days: 31\r\n            },\r\n            {\r\n                name: \"August\",\r\n                days: 31\r\n            },\r\n            {\r\n                name: \"September\",\r\n                days: 30\r\n            },\r\n            {\r\n                name: \"October\",\r\n                days: 31\r\n            },\r\n            {\r\n                name: \"November\",\r\n                days: 30\r\n            },\r\n            {\r\n                name: \"December\",\r\n                days: 31\r\n            }\r\n        ]\r\n\r\n        const columnOfMonths = [];\r\n\r\n        ListOfMonthsAndDays.map((month, index) => {\r\n            return columnOfMonths.push(<Month name={month.name} days={month.days} key={index} />)\r\n        });\r\n\r\n        return (\r\n            <div className=\"Calendar\">\r\n                <ColumnOfNumbers />\r\n                {columnOfMonths}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Stats from './Components/Stats'\r\nimport TableOfContents from './Components/TableOfContents'\r\nimport Calendar from './Components/Calendar'\r\nimport './Contents/CSS/App.css';\r\nimport store from './store'\r\nimport { Provider } from 'react-redux'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store} >\r\n        <div className=\"App\">\r\n            <div className=\"Buffer\">\r\n              <h2>Table of Contents</h2>\r\n              <TableOfContents />\r\n            </div>\r\n            <div className=\"Calendar\">\r\n            <h2>Calendar</h2>\r\n              <Calendar />\r\n            </div>\r\n            <div className=\"Buffer\">\r\n              <h2>Stats</h2>\r\n              <Stats />\r\n            </div>\r\n        </div>\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Contents/CSS/index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}